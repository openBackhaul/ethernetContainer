{
	"info": {
		"_postman_id": "c01aef7c-77e0-4c6e-b522-5dfeaf30fbd7",
		"name": "Interface Validation",
		"description": "All WireInterface Capability Attributes can be read\nAll PureEthernet Capability Attributes can be read",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setting up Collection and Environment",
			"item": [
				{
					"name": "Setting Up Environment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a1e746e-a742-4b4d-ba2f-962986fd39c4",
								"exec": [
									"console.log(\"=======================================\");",
									"console.log(\"Start of Setting Up Environment\");",
									"/*************************************",
									"* Setting up Environmental Variables *",
									"*************************************/",
									"// Clearing all Environmental Variables",
									"pm.environment.clear();",
									"",
									"// Setting Controller IP address and Port ",
									"pm.environment.set(\"controllerAddress\", \"172.29.145.220:8181/\");",
									"console.log(\" Environmental variable 'controllerAddress' has been set to: \" + pm.environment.get(\"controllerAddress\"));",
									"",
									"// Setting Controller Username and Password",
									"pm.environment.set(\"username\", \"admin\");",
									"console.log(\" Environmental variable 'username' has been set to: \" + pm.environment.get(\"username\"));",
									"pm.environment.set(\"password\", \"admin\");",
									"console.log(\" Environmental variable 'password' has been set to: \" + pm.environment.get(\"username\"));",
									"",
									"// Setting the Header Keys",
									"pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"console.log(\" Header key 'Accept' has been set to: application/json\");",
									"pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
									"console.log(\" Header key 'Content-Type' has been set to: application/json\");",
									"",
									"",
									"/**********************************",
									"* Setting up Collection Variables *",
									"**********************************/",
									"// Initializing List of Interfaces at Devices",
									"let interfacesAtMountedNodes = [];",
									"pm.collectionVariables.set(\"interfacesAtMountedNodes\", interfacesAtMountedNodes);",
									"",
									"// Defining the nect Step",
									"pm.collectionVariables.set(\"step\", 0);",
									"",
									"// Defining the Device under Test",
									"pm.collectionVariables.set(\"deviceUnderTest\", 0);",
									"",
									"// Defining the LTP under Test",
									"pm.collectionVariables.set(\"ltpUnderTest\", 0);",
									"",
									"//",
									"// AirInterface",
									"//",
									"let airInterfaceCapabilitySchema = {",
									"};",
									"pm.collectionVariables.set(\"airInterfaceCapabilitySchema\", airInterfaceCapabilitySchema);",
									"",
									"let airInterfaceConfigurationSchema = { ",
									"};",
									"pm.collectionVariables.set(\"airInterfaceConfigurationSchema\", airInterfaceConfigurationSchema);",
									"",
									"let airInterfaceStatusSchema = { ",
									"};",
									"pm.collectionVariables.set(\"airInterfaceStatusSchema\", airInterfaceStatusSchema);",
									"",
									"let airInterfaceCurrentProblemensSchema = { ",
									"};",
									"pm.collectionVariables.set(\"airInterfaceCurrentProblemensSchema\", airInterfaceCurrentProblemensSchema);",
									"",
									"let airInterfaceCurrentPerformanceSchema = { ",
									"};",
									"pm.collectionVariables.set(\"airInterfaceCurrentPerformanceSchema\", airInterfaceCurrentPerformanceSchema);",
									"",
									"let airInterfaceHistoricalPerformancesSchema = { ",
									"};",
									"pm.collectionVariables.set(\"airInterfaceHistoricalPerformancesSchema\", airInterfaceHistoricalPerformancesSchema);",
									"",
									"",
									"//",
									"// EthernetContainer",
									"//",
									"// EthernetContainer Capability",
									"let ethernetContainerCapabilitySchema = { ",
									"\t};",
									"pm.collectionVariables.set(\"ethernetContainerCapabilitySchema\", ethernetContainerCapabilitySchema);",
									"",
									"// EthernetContainer Configuration",
									"let ethernetContainerConfigurationSchema = { ",
									"\t};",
									"pm.collectionVariables.set(\"ethernetContainerConfigurationSchema\", ethernetContainerConfigurationSchema);",
									"",
									"// EthernetContainer Status",
									"let ethernetContainerStatusSchema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"    \"$id\": \"https://github.com/openBackhaul/ethernetContainer/blob/tsp/EthernetContainer_2.0.0-tsp.191123.1240+status.1.schema.json\",",
									"    \"title\": \"EthernetContainer_2.0.0-tsp.191123.1240+status.1.schema.json\",",
									"    \"description\": \"JSON Schema for EthernetContainerStatus\",",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"ethernet-container-2-0:ethernet-container-status\" : {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"interface-status\": { \"enum\": [",
									"                                        \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UP\", ",
									"                                        \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DOWN\", ",
									"                                        \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_TESTING\", ",
									"                                        \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\", ",
									"                                        \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\", ",
									"                                        \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\", ",
									"                                        \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
									"                                        \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\", ",
									"                                        \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
									"                                      ]",
									"                },",
									"                \"bundling-is-up\":               { \"type\": \"boolean\" },   ",
									"                \"remote-site-is-faulty\":        { \"type\": \"boolean\" },                   ",
									"                \"loop-back-kind-up\":    { \"enum\": [",
									"                                            \"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\", ",
									"                                            \"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\", ",
									"                                            \"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\",",
									"                                            \"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\"",
									"                                          ]",
									"                },",
									"                \"statistics-is-up\":             { \"type\": \"boolean\" },",
									"                \"performance-monitoring-is-up\": { \"type\": \"boolean\" },",
									"                \"timestamp\":                    { \"type\": \"string\"  },",
									"                \"last-10-sec-data-input-rate\":  { \"type\": \"integer\" },",
									"                \"last-10-sec-data-output-rate\": { \"type\": \"integer\" },",
									"                \"total-bytes-input\":            { \"type\": \"integer\" },",
									"                \"total-bytes-output\":           { \"type\": \"integer\" },",
									"                \"forwarded-bytes-input\":        { \"type\": \"integer\" },",
									"                \"forwarded-bytes-output\":       { \"type\": \"integer\" }",
									"            },",
									"            \"required\": [\"interface-status\", ",
									"                            \"bundling-is-up\", ",
									"                            \"remote-site-is-faulty\", ",
									"                            \"loop-back-kind-up\", ",
									"                            \"statistics-is-up\", ",
									"                            \"performance-monitoring-is-up\", ",
									"                            \"timestamp\", ",
									"                            \"last-10-sec-data-input-rate\", ",
									"                            \"last-10-sec-data-output-rate\", ",
									"                            \"total-bytes-input\", ",
									"                            \"total-bytes-output\", ",
									"                            \"forwarded-bytes-input\", ",
									"                            \"forwarded-bytes-output\"",
									"                        ]",
									"        }",
									"    },",
									"    \"required\": [\"ethernet-container-2-0:ethernet-container-status\"]",
									"};",
									"pm.collectionVariables.set(\"ethernetContainerStatusSchema\", ethernetContainerStatusSchema);",
									"",
									"// EthernetContainer CurrentProblems",
									"let ethernetContainerCurrentProblemensSchema = { ",
									"\t};",
									"pm.collectionVariables.set(\"ethernetContainerCurrentProblemensSchema\", ethernetContainerCurrentProblemensSchema);",
									"",
									"// EthernetContainer CurrentPerformance",
									"let ethernetContainerCurrentPerformanceSchema = { ",
									"\t};",
									"pm.collectionVariables.set(\"ethernetContainerCurrentPerformanceSchema\", ethernetContainerCurrentPerformanceSchema);",
									"",
									"// EthernetContainer HistoricalPerformances",
									"let ethernetContainerHistoricalPerformancesSchema = { ",
									"\t};",
									"pm.collectionVariables.set(\"ethernetContainerHistoricalPerformancesSchema\", ethernetContainerHistoricalPerformancesSchema);",
									"",
									"",
									"//",
									"// HybridMwStructure",
									"//",
									"",
									"",
									"//",
									"// IpInterface",
									"//",
									"",
									"",
									"//",
									"// MacInterface",
									"//",
									"",
									"",
									"//",
									"// PureEthernetStructure",
									"//",
									"",
									"",
									"//",
									"// TdmContainer",
									"//",
									"",
									"",
									"//",
									"// VlanInterface",
									"//",
									"",
									"",
									"//",
									"// WireInterface",
									"//",
									"",
									"// WireInterface Capability",
									"let wireInterfaceCapabilitySchema = {",
									"  \"type\": \"object\", ",
									"  \"properties\": {",
									"    \"supported-pmd-kind-list\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"pmd-name\":                             { \"type\": \"string\" },",
									"        \"speed\":                                { \"type\": \"string\" },",
									"        \"duplex\":   { \"enum\": [",
									"\t\t\t\t\t\t\"wire-interface-2-0:DUPLEX_TYPE_HALF_DUPLEX\",",
									"\t\t\t\t\t\t\"wire-interface-2-0:DUPLEX_TYPE_FULL_DUPLEX\",",
									"\t\t\t\t\t\t\"wire-interface-2-0:DUPLEX_TYPE_NOT_YET_DEFINED\"",
									"\t\t\t\t\t  ]",
									"        }",
									"      } ",
									"    },   ",
									"    \"auto-pmd-negotiation-is-avail\":            { \"type\": \"boolean\" }, ",
									"    \"auto-negotiation-pmd-selection-is-avail\":  { \"type\": \"boolean\" },   ",
									"    \"supported-signal-ordering-kind-list\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"enum\": [",
									"\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI\",",
									"\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI_X\",",
									"\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_NOT_YET_DEFINED\"",
									"\t\t]",
									"      }",
									"    },",
									"    \"auto-signal-ordering-is-avail\":                { \"type\": \"boolean\" },   ",
									"    \"configuration-of-rx-sync-preference-is-avail\": { \"type\": \"boolean\" },   ",
									"    \"mii-kind\": { \"enum\": [",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_GBIC\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SOLDERED_CONNECTOR\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SFP_SFP_PLUS_SFP28\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XBI_300_PIN\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XENPAK\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XFP\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XFP_E\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XPAK\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_X2\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_DWDM_SFP_SFP_PLUS\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_CXP\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_4X\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_(X\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP28\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_CXP2\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_CDFP_STYLE1_STYLE2\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_4X_FAN_OUT\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_8X_FAN_OUT\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_CDFP_STYLE3\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_MICRO\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_DD\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS_RATE_SELECT_V1\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS_RATE_SELECT_V2\",",
									"\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_NOT_YET_DEFINED\"",
									"\t\t\t\t  ]",
									"    }, ",
									"    \"mdi-kind\": { \"enum\": [",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_SC\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_FIBRE_CHANNEL_STYLE_1\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_FIBRE_CHANNEL_STYLE_2\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_BNC_TNC\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_FC\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_FIBER_JACK\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_LC\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MT_RJ\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MU\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_SG\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_OPTICAL_PIGTAIL\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MPO1x12\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MPO2x16\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_HSSDC_II\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_COPPER_PIGTAIL\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_RJ45\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_NO_SEPERABLE_CONNECTOR\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MXC2x16\",",
									"\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_NOT_YET_DEFINED\"",
									"\t\t\t\t  ]",
									"\t},    ",
									"    \"required-medium-kind\": { \"enum\": [",
									"\t\t\t\t\t            \"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT3\",",
									"\t\t\t\t            \t\"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT5\",",
									"\t\t\t            \t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT6\",",
									"\t\t\t            \t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT8\",",
									"\t\t            \t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_SINGLE_MODE\",",
									"\t\t            \t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_MULTI_MODE\",",
									"\t\t            \t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_NOT_YET_DEFINED\"",
									"\t\t            \t\t  ]",
									"\t},    ",
									"    \"wavelength-min\": {",
									"      \"type\": \"array\",",
									"      \"items\": { ",
									"          \"type\": \"number\" ",
									"      }",
									"    },   ",
									"    \"wavelength-max\": {",
									"\t  \"type\": \"array\",",
									"      \"items\": {",
									"          \"type\": \"number\" ",
									"      }",
									"    },",
									"    \"wavelength-grid-min\":                      { \"type\": \"number\" },",
									"    \"short-reach-mode-is-avail\":                { \"type\": \"boolean\" }, ",
									"    \"eee-is-avail\":                             { \"type\": \"boolean\" }, ",
									"    \"unidirectional-operation-is-avail\":        { \"type\": \"boolean\" }, ",
									"    \"rxlevel-low-threshold\":                    { \"type\": \"number\" },",
									"    \"rxlevel-high-threshold\":                   { \"type\": \"number\" }, ",
									"    \"temperature-low-threshold\":                { \"type\": \"number\" }, ",
									"    \"temperature-high-threshold\":               { \"type\": \"number\" }, ",
									"    \"configuration-of-number-of-bip-errors-per-ses-is-avail\": { \"type\": \"boolean\" }, ",
									"    \"admin-shut-down-is-avail\":                 { \"type\": \"boolean\"}, ",
									"    \"isolation-is-avail\":                       { \"type\": \"boolean\" }, ",
									"    \"supported-loop-back-kind-list\": {",
									"      \"type\": \"array\", ",
									"      \"items\": {",
									"        \"enum\": [",
									"\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NONE\",",
									"\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_EXTERNAL\",",
									"\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_INTERNAL\",",
									"\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
									"\t\t\t]",
									"      },",
									"\t}, ",
									"    \"maintenance-timer-range\":                  { \"type\": \"string\" }, ",
									"    \"supported-alarm-list\": {",
									"\t  \"type\": \"array\", ",
									"      \"items\": {",
									"            \"type\": \"string\"",
									"      }",
									"\t}, ",
									"    \"performance-monitoring-is-avail\":          { \"type\": \"boolean\" }, ",
									"  }",
									"};",
									"pm.collectionVariables.set(\"wireInterfaceCapabilitySchema\", wireInterfaceCapabilitySchema);",
									"",
									"// WireInterface Configuration",
									"let wireInterfaceConfigurationSchema = {",
									"  \"$schema\": \"\",",
									"  \"$id\": \"\",",
									"  \"title\": \"\",",
									"  \"description\": \"\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"\t\"wire-interface-2-0:wire-interface-configuration\": {",
									"\t\t\"type\": \"object\",",
									"\t\t\"properties\": {",
									"\t\t\t\"interface-name\": \t\t\t\t{ \"type\": \"string\" },",
									"\t\t\t\"interface-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
									"\t\t\t\"remote-wire-interface-name\": \t{ \"type\": \"string\" }, ",
									"\t\t    \"transceiver-is-on-list\": {",
									"\t\t\t\t\"type\": \"array\",",
									"\t\t\t\t\"items\": {",
									"\t\t\t\t\t\"type\": \"boolean\"",
									"\t\t\t\t}",
									"\t\t\t}, \t   ",
									"\t\t\t\"auto-pmd-negotiation-is-on\": \t{ \"type\": \"boolean\" },",
									"\t\t\t\"fixed-pmd-kind\": \t\t\t\t{ \"type\": \"string\" },",
									"\t\t\t\"auto-negotiation-pmd-list\": {",
									"\t\t\t\t\"type\": \"array\",",
									"\t\t\t\t\"items\": {",
									"\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t}",
									"\t\t\t},\t\t\t",
									"\t\t\t\"auto-signal-ordering-is-on\": \t\t{ \"type\": \"boolean\" },",
									"\t\t\t\"fixed-signal-ordering-kind\": { \"enum\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI_X\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_NOT_YET_DEFINED\"",
									"\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t},",
									"\t\t\t\"wavelength-list\": {",
									"\t\t\t\t\"type\": \"array\",",
									"\t\t\t\t\"items\": {",
									"\t\t\t\t\t\"type\": \"number\"",
									"\t\t\t\t}",
									"\t\t\t},",
									"\t\t\t\"rx-sync-preference\": \t\t\t{ \"type\": \"string\" }, ",
									"\t\t\t\"short-reach-mode-is-on\": \t\t{ \"type\": \"boolean\" },\t\t",
									"\t\t\t\"eee-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" }, ",
									"\t\t\t\"unidirectional-operation-is-on\": { \"type\": \"boolean\" }, ",
									"\t\t\t\"number-of-bip-errors-per-ses\":\t{ \"type\": \"number\" },",
									"\t\t\t\"restart-pmd-negotiation-is-on\":{ \"type\": \"boolean\" }, ",
									"\t\t\t\"isolation-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
									"\t\t\t\"loop-back-kind-on\": { \"enum\": [",
									"\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NONE\",",
									"\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_BACK_TO_EXTERNAL\",",
									"\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_BACK_TO_INTERNAL\",",
									"\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
									"\t\t\t\t\t\t\t\t\t]",
									"\t\t\t},",
									"\t\t\t\"maintenance-timer\": \t\t\t{ \"type\": \"number\" },",
									"\t\t\t\"problem-kind-severity-list\": {",
									"\t\t\t\t\"type\": \"array\",",
									"\t\t\t\t\"items\": {",
									"\t\t\t\t\t\"problem-kind-name\": \t{ \"type\": \"string\" },",
									"\t\t\t\t\t\"problem-kind-severity\": { \"enum\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\t   \"wire-interface-2-0:SEVERITY_TYPE_NON_ALARMED\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t   \"wire-interface-2-0:SEVERITY_TYPE_WARNING\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t   \"wire-interface-2-0:SEVERITY_TYPE_MINOR\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t   \"wire-interface-2-0:SEVERITY_TYPE_MAJOR\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t   \"wire-interface-2-0:SEVERITY_TYPE_CRITICAL\",",
									"\t\t\t\t\t\t\t\t\t\t\t\t   \"wire-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
									"\t\t\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t}",
									"\t\t\t\t}",
									"\t\t\t}, ",
									"\t\t\t\"performance-monitoring-is-on\": { \"type\": \"boolean\" }",
									"\t\t}",
									"\t}",
									"  }",
									"};",
									" pm.collectionVariables.set(\"ethernetContainerConfigurationSchema\", ethernetContainerConfigurationSchema);",
									"",
									"// WireInterface Status",
									"",
									"// WireInterface CurrentProblems",
									"",
									"// WireInterface CurrentPerformance",
									"",
									"// WireInterface HistoricalPerformances",
									"",
									"",
									"/*****************************",
									"* Setting up Local Variables *",
									"*****************************/",
									"// Defining the Addressed Object",
									"pm.variables.set(\"dB\", \"restconf/config/network-topology:network-topology/topology/topology-netconf\");",
									"pm.variables.set(\"networkElement\", \"\");",
									"pm.variables.set(\"object\", \"\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ec562c48-5724-43dd-9827-6b93725cf290",
								"exec": [
									"",
									"/*********************",
									"* Indicating Results *",
									"*********************/",
									"pm.test(\"Connection to Controller could be established\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.to.have.status(200)) {",
									"    console.log(\" => Connection to Controller could be established.\");",
									"}",
									"    ",
									"",
									"/**************",
									"* Cleaning Up *",
									"**************/",
									"// Kill all Local Variables",
									"pm.variables.clear();",
									"",
									"console.log(\"End of Setting Up Environment\");",
									"console.log(\"=====================================\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{controllerAddress}}{{dB}}{{networkElement}}{{object}}",
							"protocol": "http",
							"host": [
								"{{controllerAddress}}{{dB}}{{networkElement}}{{object}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FlowControl",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2547881-4575-40cb-98f9-196f6bcebc55",
								"exec": [
									"let deviceUnderTestName;",
									"switch (pm.collectionVariables.get(\"step\")) {",
									"    case 0:",
									"        console.log(\" Calling for 'Indexing Devices'.\");",
									"        postman.setNextRequest(\"Indexing Devices\");",
									"        break;",
									"    case 1:",
									"        deviceUnderTestName = pm.collectionVariables.get(\"mountedNodeIdList\")[pm.collectionVariables.get(\"deviceUnderTest\")];",
									"        console.log(\" Calling for 'Indexing LTPs and LPs' at \" + deviceUnderTestName + \".\");",
									"        postman.setNextRequest(\"Indexing LTPs and LPs\");",
									"        break;",
									"    case 2:",
									"        console.log(\" --- Reserved for future expansion ---\");",
									"        pm.collectionVariables.set(\"step\", 10);",
									"        postman.setNextRequest(\"FlowControl\");",
									"        break;",
									"        ",
									"    case 10:",
									"        console.log(\" Calling for 'Validating Existing Interfaces'.\");",
									"        //pm.collectionVariables.set(\"deviceUnderTest\", 0);",
									"        pm.collectionVariables.set(\"deviceUnderTest\", 1);           // just to step over device without airInterface",
									"        pm.collectionVariables.set(\"technologyUnderTest\", 0);",
									"        pm.collectionVariables.set(\"ltpUnderTest\", 0);",
									"        postman.setNextRequest(\"Validating Existing Interfaces\");",
									"        break;",
									"    case 11:",
									"        console.log(\" --- Reserved for future expansion ---\");",
									"        pm.collectionVariables.set(\"step\", 99);",
									"        postman.setNextRequest(\"FlowControl\");",
									"        break;        ",
									"",
									"    case 99:",
									"        postman.setNextRequest(null);",
									"        console.log(\" Execution planfully terminated.\");",
									"        break;   ",
									"",
									"    default:",
									"        postman.setNextRequest(null);",
									"        console.log(\" Execution terminated with 'step' = ? (Hard Exit).\");",
									"}",
									"",
									"",
									"/**************",
									"* Cleaning Up *",
									"**************/",
									"// Kill all Local Variables",
									"//pm.variables.clear();",
									"",
									"console.log(\"End of FlowControl\");",
									"console.log(\"==================\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "592c6152-32b6-467e-b587-b73b3973463f",
								"exec": [
									"console.log(\"Start of FlowControl\");",
									"/**********************************",
									"* Setting up Collection Variables *",
									"**********************************/",
									"",
									"",
									"/*****************************",
									"* Setting up Local Variables *",
									"*****************************/",
									"// Defining the Addressed Object",
									"pm.variables.set(\"dB\", \"restconf/config/network-topology:network-topology/topology/topology-netconf\");",
									"pm.variables.set(\"networkElement\", \"\");",
									"pm.variables.set(\"object\", \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{controllerAddress}}{{dB}}{{networkElement}}{{object}}",
							"protocol": "http",
							"host": [
								"{{controllerAddress}}{{dB}}{{networkElement}}{{object}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Indexing Devices",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a1e746e-a742-4b4d-ba2f-962986fd39c4",
								"exec": [
									"console.log(\"Start of Indexing Devices\");",
									"/*************************************",
									"* Setting up Environmental Variables *",
									"*************************************/",
									"",
									"",
									"",
									"/*****************************",
									"* Setting up Local Variables *",
									"*****************************/",
									"// Defining the Addressed Object",
									"pm.variables.set(\"dB\", \"restconf/config/network-topology:network-topology/topology/topology-netconf\");",
									"pm.variables.set(\"networkElement\", \"\");",
									"pm.variables.set(\"object\", \"\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ec562c48-5724-43dd-9827-6b93725cf290",
								"exec": [
									"/**********************************",
									"* Setting up Collection Variables *",
									"**********************************/",
									"var topologyList = pm.response.json();",
									"",
									"// Preparing List of mounted Devices",
									"let mountedNodeIdList = [];",
									"for (let i=0; i<topologyList.topology[0].node.length; i++) {",
									"//for (let i=0; i<2; i++) {                                                //   ***** for saving time only ******",
									"   mountedNodeIdList[i] = topologyList.topology[0].node[i][\"node-id\"];",
									"}",
									"pm.collectionVariables.set(\"mountedNodeIdList\", mountedNodeIdList);",
									"console.log(\" => Collection variable 'mountedNodeIdList' has been set to: \");",
									"console.log(pm.collectionVariables.get(\"mountedNodeIdList\"));",
									"",
									"",
									"/*********************",
									"* Indicating Results *",
									"*********************/",
									"pm.test(\"Controller provided Topology Information (Status code is 200)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"At least one Device is mounted\", function () {",
									"    pm.expect(mountedNodeIdList.length).to.be.at.least(1);",
									"});",
									"",
									"",
									"/******************************",
									"* Cleaning Up and Terminating *",
									"******************************/",
									"// Kill all Local Variables",
									"pm.variables.clear();",
									"pm.collectionVariables.set(\"step\", pm.collectionVariables.get(\"step\")+1);",
									"postman.setNextRequest(\"FlowControl\");",
									"",
									"console.log(\"End of Indexing Devices\");",
									"console.log(\"==========================================\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{controllerAddress}}{{dB}}{{networkElement}}{{object}}",
							"protocol": "http",
							"host": [
								"{{controllerAddress}}{{dB}}{{networkElement}}{{object}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Indexing LTPs and LPs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2547881-4575-40cb-98f9-196f6bcebc55",
								"exec": [
									"var controlConstruct = pm.response.json();",
									"",
									"console.log(\" => controlConstruct of \" + pm.collectionVariables.get(\"mountedNodeIdList\")[pm.collectionVariables.get(\"deviceUnderTest\")] + \":\");  //for testing only",
									"console.log(controlConstruct);  //for testing only",
									"",
									"let airInterfaceList = [];",
									"let ethernetContainerList = [];",
									"let hybridMwStructureList = [];",
									"let pureEthernetStructureList = [];",
									"let tdmContainerList = [];",
									"let wireInterfaceList = [];",
									"",
									"for (let i=0; i<controlConstruct[\"control-construct\"][\"logical-termination-point\"].length; i++) {",
									"    let layerProtocolName;",
									"    let ltpUuid;",
									"    let lpLid;",
									"    let setOfIds = { ltpUuid, lpLid };",
									"",
									"    layerProtocolName = controlConstruct[\"control-construct\"][\"logical-termination-point\"][i][\"layer-protocol\"][0][\"layer-protocol-name\"];",
									"    setOfIds.ltpUuid = controlConstruct[\"control-construct\"][\"logical-termination-point\"][i][\"uuid\"];",
									"    setOfIds.lpLid = controlConstruct[\"control-construct\"][\"logical-termination-point\"][i][\"layer-protocol\"][0][\"local-id\"];",
									"",
									"    switch (layerProtocolName) {",
									"        case \"air-interface-2-0:LAYER_PROTOCOL_NAME_TYPE_AIR_LAYER\":",
									"            airInterfaceList.push(setOfIds);",
									"            break;",
									"        case \"ethernet-container-2-0:LAYER_PROTOCOL_NAME_TYPE_ETHERNET_CONTAINER_LAYER\":",
									"            ethernetContainerList.push(setOfIds);",
									"            break;",
									"        case \"hybrid-mw-structure-2-0:LAYER_PROTOCOL_NAME_TYPE_HYBRID_MW_STRUCTURE_LAYER\":",
									"            hybridMwStructureList.push(setOfIds);",
									"            break;",
									"        case \"pure-ethernet-structure-2-0:LAYER_PROTOCOL_NAME_TYPE_PURE_ETHERNET_STRUCTURE_LAYER\":",
									"            pureEthernetStructureList.push(setOfIds);",
									"            break;",
									"        case \"tdm-container-2-0:LAYER_PROTOCOL_NAME_TYPE_TDM_CONTAINER_LAYER\":",
									"            tdmContainerList.push(setOfIds);",
									"            break;",
									"        case \"wire-interface-2-0:LAYER_PROTOCOL_NAME_TYPE_WIRE_LAYER\":",
									"            wireInterfaceList.push(setOfIds);",
									"            break;",
									"        default:",
									"            console.log(\"Error: Unknown Layer Protocol Name\");",
									"    }",
									"}",
									"",
									"let interfaceList = {",
									"        airInterfaceList,",
									"        ethernetContainerList,",
									"        hybridMwStructureList,",
									"        pureEthernetStructureList,",
									"        tdmContainerList,",
									"        wireInterfaceList,",
									"    };",
									"",
									"pm.collectionVariables.set(\"interfacesAtMountedNodes\"[pm.collectionVariables.get(\"deviceUnderTest\")], interfaceList);",
									"console.log(\" => LayerProtocolNames at \" + pm.collectionVariables.get(\"mountedNodeIdList\")[pm.collectionVariables.get(\"deviceUnderTest\")] + \": \");",
									"console.log(pm.collectionVariables.get(\"interfacesAtMountedNodes\"[pm.collectionVariables.get(\"deviceUnderTest\")]));",
									"",
									"console.log(pm.collectionVariables.get(\"interfacesAtMountedNodes\"));",
									"",
									"/******************************",
									"* Cleaning Up and Terminating *",
									"******************************/",
									"// Kill all Local Variables",
									"//pm.variables.clear();",
									"pm.collectionVariables.set(\"deviceUnderTest\", pm.collectionVariables.get(\"deviceUnderTest\")+1);",
									"if (pm.collectionVariables.get(\"deviceUnderTest\") >= pm.collectionVariables.get(\"mountedNodeIdList\").length) {",
									"    pm.collectionVariables.set(\"step\", pm.collectionVariables.get(\"step\")+1);",
									"    pm.collectionVariables.set(\"deviceUnderTest\", 0);",
									"}",
									"postman.setNextRequest(\"FlowControl\");",
									"",
									"console.log(\"Indexing LTPs and LPs\");",
									"console.log(\"==============================================\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "592c6152-32b6-467e-b587-b73b3973463f",
								"exec": [
									"console.log(\"Indexing LTPs and LPs\");",
									"/**********************************",
									"* Setting up Collection Variables *",
									"**********************************/",
									"",
									"",
									"/*****************************",
									"* Setting up Local Variables *",
									"*****************************/",
									"// Defining the Addressed Object",
									"pm.variables.set(\"dB\", \"restconf/config/network-topology:network-topology/topology/topology-netconf\");",
									"var nodeId = pm.collectionVariables.get(\"mountedNodeIdList\")[pm.collectionVariables.get(\"deviceUnderTest\")];",
									"pm.variables.set(\"networkElement\", \"/node/\" + nodeId + \"/yang-ext:mount\");",
									"pm.variables.set(\"object\", \"/core-model-1-4:control-construct\");",
									"",
									"// Setting the Header Keys",
									"pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{controllerAddress}}{{dB}}{{networkElement}}{{object}}",
							"protocol": "http",
							"host": [
								"{{controllerAddress}}{{dB}}{{networkElement}}{{object}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "Existing Interfaces",
					"item": [
						{
							"name": "Validating Existing Interfaces",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6b1f78ca-0974-4e2c-84e0-2e539d4eda1e",
										"exec": [
											"console.log(\"Start of Validating Existing Interfaces\");",
											"",
											"/*****************************",
											" * Setting Local Variables *",
											" *****************************/",
											"let deviceUnderTest = pm.collectionVariables.get(\"deviceUnderTest\");",
											"let technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"let ltpUnderTest = pm.collectionVariables.get(\"ltpUnderTest\");",
											"console.log(\" deviceUnderTest:\" + deviceUnderTest);                     // for testing only",
											"console.log(\" technologyUnderTest:\" + technologyUnderTest);             // for testing only",
											"console.log(\" ltpUnderTest:\" + ltpUnderTest);                           // for testing only",
											"",
											"let mountedNodeIdList = pm.collectionVariables.get(\"mountedNodeIdList\");",
											"let nodeIdOfDeviceUnderTest = mountedNodeIdList[deviceUnderTest];",
											"console.log(\" nodeIdOfDeviceUnderTest: \" + nodeIdOfDeviceUnderTest);    // for testing only",
											"",
											"let interfacesAtMountedNodes = pm.collectionVariables.get(\"interfacesAtMountedNodes\");",
											"console.log(\" interfacesAtMountedNodes:\");                              // for testing only",
											"console.log(interfacesAtMountedNodes);                                  // for testing only",
											"let listsOfInterfacesAtDeviceUnderTest = interfacesAtMountedNodes[deviceUnderTest];",
											"console.log(\" listsOfInterfacesAtDeviceUnderTest:\");                    // for testing only",
											"console.log(listsOfInterfacesAtDeviceUnderTest);                        // for testing only",
											"",
											"console.log(\"orginal abfrage\");                        // for testing only",
											"console.log(pm.collectionVariables.get(\"interfacesAtMountedNodes\"[pm.collectionVariables.get(\"deviceUnderTest\")]));                       // for testing only",
											"",
											"let ltpUuidOfObjectUnderTest;",
											"let lpLidOfObjectUnderTest;",
											"let typeOfObjectUnderTest;",
											"",
											"switch (technologyUnderTest) {",
											"    case 0:",
											"        if (typeof listsOfInterfacesAtDeviceUnderTest.airInterfaceList[ltpUnderTest] !== null) {",
											"            ltpUuidOfObjectUnderTest = listsOfInterfacesAtDeviceUnderTest.airInterfaceList[ltpUnderTest].ltpUuid;",
											"            lpLidOfObjectUnderTest = listsOfInterfacesAtDeviceUnderTest.airInterfaceList[ltpUnderTest].lpLid;",
											"            typeOfObjectUnderTest = \"/air-interface-2-0:air-interface-pac\";",
											"        }",
											"        else {",
											"            console.log(\" There are no AirInterfaces at device no. \" + deviceUnderTest);",
											"        }",
											"        break;",
											"    case 1:",
											"        ltpUuidOfObjectUnderTest = listsOfInterfacesAtDeviceUnderTest.ethernetContainerList[ltpUnderTest].ltpUuid;",
											"        lpLidOfObjectUnderTest = listsOfInterfacesAtDeviceUnderTest.ethernetContainerList[ltpUnderTest].lpLid;",
											"        typeOfObjectUnderTest = \"/ethernet-container-2-0:ethernet-container-pac\";",
											"        break;",
											"    case 2:",
											"        ltpUuidOfObjectUnderTest = listsOfInterfacesAtDeviceUnderTest.hybridMwStructureList[ltpUnderTest].ltpUuid;",
											"        lpLidOfObjectUnderTest = listsOfInterfacesAtDeviceUnderTest.hybridMwStructureList[ltpUnderTest].lpLid;",
											"        typeOfObjectUnderTest = \"/hybrid-mw-structure-2-0:hybrid-mw-structure-pac\";",
											"        break;",
											"    case 3:",
											"        ltpUuidOfObjectUnderTest = listsOfInterfacesAtDeviceUnderTest.pureEthernetStructureList[ltpUnderTest].ltpUuid;",
											"        lpLidOfObjectUnderTest = listsOfInterfacesAtDeviceUnderTest.pureEthernetStructureList[ltpUnderTest].lpLid;",
											"        typeOfObjectUnderTest = \"/pure-ethernet-structure-2-0:pure-ethernet-structure-pac\";",
											"        break;",
											"    case 4:",
											"        ltpUuidOfObjectUnderTest = listsOfInterfacesAtDeviceUnderTest.tdmContainerList[ltpUnderTest].ltpUuid;",
											"        lpLidOfObjectUnderTest = listsOfInterfacesAtDeviceUnderTest.tdmContainerList[ltpUnderTest].lpLid;",
											"        typeOfObjectUnderTest = \"/tdm-container-2-0:tdm-container-pac\";",
											"        break;",
											"    case 5:",
											"        ltpUuidOfObjectUnderTest = listsOfInterfacesAtDeviceUnderTest.wireInterfaceList[ltpUnderTest].ltpUuid;",
											"        lpLidOfObjectUnderTest = listsOfInterfacesAtDeviceUnderTest.wireInterfaceList[ltpUnderTest].lpLid;",
											"        typeOfObjectUnderTest = \"/wire-interface-2-0:wire-interface-pac\";",
											"        break;",
											"    default:",
											"        ltpUuidOfObjectUnderTest = \"\";",
											"        lpLidOfObjectUnderTest = \"\";",
											"        typeOfObjectUnderTest = \"\";",
											"        console.log(\" Unsupported Pac to be analysed.\");",
											"}",
											"console.log(\" ltpUuidOfObjectUnderTest: \" + ltpUuidOfObjectUnderTest); // for testing only",
											"console.log(\" lpLidOfObjectUnderTest: \" + lpLidOfObjectUnderTest); // for testing only",
											"console.log(\" typeOfObjectUnderTest: \" + typeOfObjectUnderTest); // for testing only",
											"",
											"/*****************************",
											" * Formulating the Request   *",
											" *****************************/",
											"pm.variables.set(\"dB\", \"restconf/config/network-topology:network-topology/topology/topology-netconf\");",
											"pm.variables.set(\"networkElement\", \"/node/\" + nodeIdOfDeviceUnderTest + \"/yang-ext:mount\");",
											"pm.variables.set(\"object\",",
											"    \"/core-model-1-4:control-construct/logical-termination-point/\" + ltpUuidOfObjectUnderTest + \"/layer-protocol/\" + lpLidOfObjectUnderTest + typeOfObjectUnderTest);",
											"",
											"pm.request.headers.upsert({",
											"    key: \"Accept\",",
											"    value: \"application/json\"",
											"});",
											"pm.request.headers.upsert({",
											"    key: \"Content-Type\",",
											"    value: \"application/json\"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d92f7ff4-1ff1-4869-a63d-3136fc604600",
										"exec": [
											"/*****************************",
											" * Setting up Local Variables *",
											" *****************************/",
											"let response = pm.response.json();",
											"console.log(\" response: \"); // for testing only",
											"console.log(response); // for testing only",
											"",
											"let step = pm.collectionVariables.get(\"step\");",
											"let deviceUnderTest = pm.collectionVariables.get(\"deviceUnderTest\");",
											"let technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"let ltpUnderTest = pm.collectionVariables.get(\"ltpUnderTest\");",
											"",
											"let mountedNodeIdList = pm.collectionVariables.get(\"mountedNodeIdList\");",
											"let umberOfmountedNodes = mountedNodeIdList.length;",
											"",
											"let interfaceList = pm.collectionVariables.get(\"interfacesAtMountedNodes\"[deviceUnderTest]);",
											"console.log(\"Kommt hier die Sammlung der Interface nach Technologien für das Device under Test heraus?\");",
											"console.log(interfaceList);",
											"",
											"let capabilityUnderTest;",
											"let configurationUnderTest;",
											"let statusUnderTest;",
											"let currentProblemensUnderTest;",
											"let currentPerformanceUnderTest;",
											"let historicalPerformancesUnderTest;",
											"",
											"let capabilityReference;",
											"let configurationReference;",
											"let statusReference;",
											"let currentProblemensReference;",
											"let currentPerformanceReference;",
											"let historicalPerformancesReference;",
											"",
											"/*****************************",
											" * Testing                   *",
											" *****************************/",
											"switch (technologyUnderTest) {",
											"    ",
											"    case 0: //AirInterface",
											"        capabilityUnderTest = response[\"air-interface-capability\"];",
											"        configurationUnderTest = response[\"air-interface-configuration\"];",
											"        statusUnderTest = response[\"air-interface-status\"];",
											"        currentProblemensUnderTest = response[\"air-interface-current-problemens\"];",
											"        currentPerformanceUnderTest = response[\"air-interface-current-performance\"];",
											"        historicalPerformancesUnderTest = response[\"air-interface-historical-performance\"];",
											"        console.log(capabilityUnderTest);               // for testing only",
											"        console.log(configurationUnderTest);            // for testing only",
											"        console.log(statusUnderTest);                   // for testing only",
											"        console.log(currentProblemensUnderTest);        // for testing only",
											"        console.log(currentPerformanceUnderTest);       // for testing only",
											"        console.log(historicalPerformancesUnderTest);   // for testing only",
											"      ",
											"        capabilityReference = pm.collectionVariables.get(\"airInterfaceCapabilitySchema\");",
											"        configurationReference = pm.collectionVariables.get(\"airInterfaceConfigurationSchema\");",
											"        statusReference = pm.collectionVariables.get(\"airInterfaceStatusSchema\");",
											"        currentProblemensReference = pm.collectionVariables.get(\"airInterfaceCurrentProblemensSchema\");",
											"        currentPerformanceReference = pm.collectionVariables.get(\"airInterfaceCurrentPerformanceSchema\");",
											"        historicalPerformancesReference = pm.collectionVariables.get(\"airInterfaceHistoricalPerformancesSchema\");",
											"        console.log(capabilityReference);               // for testing only",
											"        console.log(configurationReference);            // for testing only",
											"        console.log(statusReference);                   // for testing only",
											"        console.log(currentProblemensReference);        // for testing only",
											"        console.log(currentPerformanceReference);       // for testing only",
											"        console.log(historicalPerformancesReference);   // for testing only",
											"",
											"        console.log(\"Air Interface Validation Result: \");",
											"        console.log(tv4.validateMultiple(capabilityUnderTest, capabilityReference, true, true));",
											"        console.log(tv4.validateMultiple(configurationUnderTest, configurationReference, true, true));",
											"        console.log(tv4.validateMultiple(statusUnderTest, statusReference, true, true));",
											"        console.log(tv4.validateMultiple(currentProblemensUnderTest, currentProblemensReference, true, true));",
											"        console.log(tv4.validateMultiple(currentPerformanceUnderTest, currentPerformanceReference, true, true));",
											"        console.log(tv4.validateMultiple(historicalPerformancesUnderTest, historicalPerformancesReference, true, true));",
											"",
											"        numberOfTechSpecPacs = interfaceList.airInterfaceList.length;",
											"        break;",
											"        ",
											"    case 1: //EthernetContainer",
											"        capabilityUnderTest = response[\"ethernet-container-capability\"];",
											"        configurationUnderTest = response[\"ethernet-container-configuration\"];",
											"        statusUnderTest = response[\"ethernet-container-status\"];",
											"        currentProblemensUnderTest = response[\"ethernet-container-current-problemens\"];",
											"        currentPerformanceUnderTest = response[\"ethernet-container-current-performance\"];",
											"        historicalPerformancesUnderTest = response[\"ethernet-container-historical-performance\"];",
											"",
											"        capabilityReference = pm.collectionVariables.get(\"ethernetContainerCapabilitySchema\");",
											"        configurationReference = pm.collectionVariables.get(\"ethernetContainerConfigurationSchema\");",
											"        statusReference = pm.collectionVariables.get(\"ethernetContainerStatusSchema\");",
											"        currentProblemensReference = pm.collectionVariables.get(\"ethernetContainerCurrentProblemensSchema\");",
											"        currentPerformanceReference = pm.collectionVariables.get(\"ethernetContainerCurrentPerformanceSchema\");",
											"        historicalPerformancesReference = pm.collectionVariables.get(\"ethernetContainerHistoricalPerformancesSchema\");",
											"",
											"        console.log(\"Ethernet Container Validation Result: \");",
											"        console.log(tv4.validateMultiple(capabilityUnderTest, capabilityReference, true, true));",
											"        console.log(tv4.validateMultiple(configurationUnderTest, configurationReference, true, true));",
											"        console.log(tv4.validateMultiple(statusUnderTest, statusReference, true, true));",
											"        console.log(tv4.validateMultiple(currentProblemensUnderTest, currentProblemensReference, true, true));",
											"        console.log(tv4.validateMultiple(currentPerformanceUnderTest, currentPerformanceReference, true, true));",
											"        console.log(tv4.validateMultiple(historicalPerformancesUnderTest, historicalPerformancesReference, true, true));",
											"",
											"        numberOfTechSpecPacs = interfaceList.ethernetContainerList.length;",
											"        break;",
											"    case 2:",
											"        console.log(\" hybridMwStructure Validation not yet supported\");",
											"        numberOfTechSpecPacs = interfaceList.hybridMwStructureList.length;",
											"        break;",
											"    case 3:",
											"        console.log(\" pureEthernetStructure Validation not yet supported\");",
											"        numberOfTechSpecPacs = interfaceList.pureEthernetStructureList.length;",
											"        break;",
											"    case 4:",
											"        console.log(\" tdmContainer Validation not yet supported\");",
											"        numberOfTechSpecPacs = interfaceList.tdmContainerList.length;",
											"        break;",
											"    case 5:",
											"        console.log(\" wireInterface Validation not yet supported\");",
											"        numberOfTechSpecPacs = interfaceList.wireInterfaceList.length;",
											"        break;",
											"    default:",
											"        console.log(\" Unsupported Pac to be validated\");",
											"}",
											"",
											"",
											"/**********************************************",
											" * Definition next Request and Terminating     *",
											" **********************************************/",
											"ltpUnderTest++;",
											"if (ltpUnderTest >= numberOfTechSpecPacs) {",
											"    ltpUnderTest = 0;",
											"    technologyUnderTest++;",
											"    if (technologyUnderTest >= 5) { // to be increased with Drop 2 of TSP",
											"        technologyUnderTest = 0;",
											"        deviceUnderTest++;",
											"        if (deviceUnderTest >= umberOfmountedNodes) {",
											"            deviceUnderTest = 0;",
											"            step++;",
											"            postman.setNextRequest(\"FlowControl\");",
											"        }",
											"    }",
											"}",
											"",
											"pm.collectionVariables.set(\"step\", step);",
											"pm.collectionVariables.set(\"deviceUnderTest\", deviceUnderTest);",
											"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
											"pm.collectionVariables.set(\"ltpUnderTest\", ltpUnderTest);",
											"",
											"postman.setNextRequest(\"Validating Existing Interfaces\");",
											"",
											"console.log(\"End of Validating Existing Interfaces\");",
											"console.log(\"-------------------------------------------------------------\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{controllerAddress}}{{dB}}{{networkElement}}{{object}}",
									"protocol": "http",
									"host": [
										"{{controllerAddress}}{{dB}}{{networkElement}}{{object}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "aef46fd5-9672-4cc6-956e-2f57dea105e6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cc166c79-0b10-4f97-b174-d3221da83a1f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "755772a4-b784-45d5-b870-1a38a7f22f23",
			"key": "interfacesAtMountedNodes",
			"value": [],
			"type": "any"
		},
		{
			"id": "951a86c7-7790-4005-90c3-4465a0a56071",
			"key": "step",
			"value": 1,
			"type": "number"
		},
		{
			"id": "addd93ac-fe23-44dc-aa41-c8e8f0adef01",
			"key": "deviceUnderTest",
			"value": 5,
			"type": "number"
		},
		{
			"id": "3ea03a0b-fa3e-43d0-b18f-9e64620a331a",
			"key": "ltpUnderTest",
			"value": 0,
			"type": "number"
		},
		{
			"id": "bacbec50-86b0-4b6b-a63b-285fe951f146",
			"key": "airInterfaceCapabilitySchema",
			"value": {},
			"type": "any"
		},
		{
			"id": "81bd8d68-151f-4e9b-aa40-6dae68154376",
			"key": "airInterfaceConfigurationSchema",
			"value": {},
			"type": "any"
		},
		{
			"id": "18bd6cd9-9adf-4f66-bc44-7accdbeb1b57",
			"key": "airInterfaceStatusSchema",
			"value": {},
			"type": "any"
		},
		{
			"id": "3d7274f7-d957-40b7-8b44-c41b89a34487",
			"key": "airInterfaceCurrentProblemensSchema",
			"value": {},
			"type": "any"
		},
		{
			"id": "c7126619-db93-4576-8f3f-9caeaff5102e",
			"key": "airInterfaceCurrentPerformanceSchema",
			"value": {},
			"type": "any"
		},
		{
			"id": "e1b2bec0-f5cc-4443-b6d3-cae61022e262",
			"key": "airInterfaceHistoricalPerformancesSchema",
			"value": {},
			"type": "any"
		},
		{
			"id": "003ec9c1-3cde-4a48-ad91-1b539b0a4282",
			"key": "ethernetContainerCapabilitySchema",
			"value": {},
			"type": "any"
		},
		{
			"id": "e9880d3a-c969-4dfd-bec8-ce77b6d99bf2",
			"key": "ethernetContainerConfigurationSchema",
			"value": {},
			"type": "any"
		},
		{
			"id": "1c74eadf-8865-435a-b20c-45d8bd3be989",
			"key": "ethernetContainerStatusSchema",
			"value": {
				"$schema": "http://json-schema.org/draft-07/schema#",
				"$id": "https://github.com/openBackhaul/ethernetContainer/blob/tsp/EthernetContainer_2.0.0-tsp.191123.1240+status.1.schema.json",
				"title": "EthernetContainer_2.0.0-tsp.191123.1240+status.1.schema.json",
				"description": "JSON Schema for EthernetContainerStatus",
				"type": "object",
				"properties": {
					"ethernet-container-2-0:ethernet-container-status": {
						"type": "object",
						"properties": {
							"interface-status": {
								"enum": [
									"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UP",
									"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DOWN",
									"ethernet-container-2-0:INTERFACE_STATUS_TYPE_TESTING",
									"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN",
									"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DORMANT",
									"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT",
									"ethernet-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN",
									"ethernet-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN",
									"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED"
								]
							},
							"bundling-is-up": {
								"type": "boolean"
							},
							"remote-site-is-faulty": {
								"type": "boolean"
							},
							"loop-back-kind-up": {
								"enum": [
									"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL",
									"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE",
									"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED",
									"ethernet-container-2-0:LOOP_BACK_TYPE_NONE"
								]
							},
							"statistics-is-up": {
								"type": "boolean"
							},
							"performance-monitoring-is-up": {
								"type": "boolean"
							},
							"timestamp": {
								"type": "string"
							},
							"last-10-sec-data-input-rate": {
								"type": "integer"
							},
							"last-10-sec-data-output-rate": {
								"type": "integer"
							},
							"total-bytes-input": {
								"type": "integer"
							},
							"total-bytes-output": {
								"type": "integer"
							},
							"forwarded-bytes-input": {
								"type": "integer"
							},
							"forwarded-bytes-output": {
								"type": "integer"
							}
						},
						"required": [
							"interface-status",
							"bundling-is-up",
							"remote-site-is-faulty",
							"loop-back-kind-up",
							"statistics-is-up",
							"performance-monitoring-is-up",
							"timestamp",
							"last-10-sec-data-input-rate",
							"last-10-sec-data-output-rate",
							"total-bytes-input",
							"total-bytes-output",
							"forwarded-bytes-input",
							"forwarded-bytes-output"
						]
					}
				},
				"required": [
					"ethernet-container-2-0:ethernet-container-status"
				]
			},
			"type": "any"
		},
		{
			"id": "8607066f-9992-4660-b8b0-3e529dff8238",
			"key": "ethernetContainerCurrentProblemensSchema",
			"value": {},
			"type": "any"
		},
		{
			"id": "777637f5-9ef2-4542-b20d-6ba48372e9b7",
			"key": "ethernetContainerCurrentPerformanceSchema",
			"value": {},
			"type": "any"
		},
		{
			"id": "db63a405-a278-472d-99c9-5a04b0ffa417",
			"key": "ethernetContainerHistoricalPerformancesSchema",
			"value": {},
			"type": "any"
		},
		{
			"id": "2eb541e3-09db-4182-b2c1-71d076ff9cd4",
			"key": "wireInterfaceCapabilitySchema",
			"value": {
				"type": "object",
				"properties": {
					"supported-pmd-kind-list": {
						"type": "array",
						"items": {
							"pmd-name": {
								"type": "string"
							},
							"speed": {
								"type": "string"
							},
							"duplex": {
								"enum": [
									"wire-interface-2-0:DUPLEX_TYPE_HALF_DUPLEX",
									"wire-interface-2-0:DUPLEX_TYPE_FULL_DUPLEX",
									"wire-interface-2-0:DUPLEX_TYPE_NOT_YET_DEFINED"
								]
							}
						}
					},
					"auto-pmd-negotiation-is-avail": {
						"type": "boolean"
					},
					"auto-negotiation-pmd-selection-is-avail": {
						"type": "boolean"
					},
					"supported-signal-ordering-kind-list": {
						"type": "array",
						"items": {
							"enum": [
								"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI",
								"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI_X",
								"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_NOT_YET_DEFINED"
							]
						}
					},
					"auto-signal-ordering-is-avail": {
						"type": "boolean"
					},
					"configuration-of-rx-sync-preference-is-avail": {
						"type": "boolean"
					},
					"mii-kind": {
						"enum": [
							"wire-interface-2-0:MII_KIND_TYPE_GBIC",
							"wire-interface-2-0:MII_KIND_TYPE_SOLDERED_CONNECTOR",
							"wire-interface-2-0:MII_KIND_TYPE_SFP_SFP_PLUS_SFP28",
							"wire-interface-2-0:MII_KIND_TYPE_XBI_300_PIN",
							"wire-interface-2-0:MII_KIND_TYPE_XENPAK",
							"wire-interface-2-0:MII_KIND_TYPE_XFP",
							"wire-interface-2-0:MII_KIND_TYPE_XFP_E",
							"wire-interface-2-0:MII_KIND_TYPE_XPAK",
							"wire-interface-2-0:MII_KIND_TYPE_X2",
							"wire-interface-2-0:MII_KIND_TYPE_DWDM_SFP_SFP_PLUS",
							"wire-interface-2-0:MII_KIND_TYPE_QSFP",
							"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS",
							"wire-interface-2-0:MII_KIND_TYPE_CXP",
							"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_4X",
							"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_(X",
							"wire-interface-2-0:MII_KIND_TYPE_QSFP28",
							"wire-interface-2-0:MII_KIND_TYPE_CXP2",
							"wire-interface-2-0:MII_KIND_TYPE_CDFP_STYLE1_STYLE2",
							"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_4X_FAN_OUT",
							"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_8X_FAN_OUT",
							"wire-interface-2-0:MII_KIND_TYPE_CDFP_STYLE3",
							"wire-interface-2-0:MII_KIND_TYPE_QSFP_MICRO",
							"wire-interface-2-0:MII_KIND_TYPE_QSFP_DD",
							"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS_RATE_SELECT_V1",
							"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS_RATE_SELECT_V2",
							"wire-interface-2-0:MII_KIND_TYPE_NOT_YET_DEFINED"
						]
					},
					"mdi-kind": {
						"enum": [
							"wire-interface-2-0:MDI_KIND_TYPE_SC",
							"wire-interface-2-0:MDI_KIND_TYPE_FIBRE_CHANNEL_STYLE_1",
							"wire-interface-2-0:MDI_KIND_TYPE_FIBRE_CHANNEL_STYLE_2",
							"wire-interface-2-0:MDI_KIND_TYPE_BNC_TNC",
							"wire-interface-2-0:MDI_KIND_TYPE_FC",
							"wire-interface-2-0:MDI_KIND_TYPE_FIBER_JACK",
							"wire-interface-2-0:MDI_KIND_TYPE_LC",
							"wire-interface-2-0:MDI_KIND_TYPE_MT_RJ",
							"wire-interface-2-0:MDI_KIND_TYPE_MU",
							"wire-interface-2-0:MDI_KIND_TYPE_SG",
							"wire-interface-2-0:MDI_KIND_TYPE_OPTICAL_PIGTAIL",
							"wire-interface-2-0:MDI_KIND_TYPE_MPO1x12",
							"wire-interface-2-0:MDI_KIND_TYPE_MPO2x16",
							"wire-interface-2-0:MDI_KIND_TYPE_HSSDC_II",
							"wire-interface-2-0:MDI_KIND_TYPE_COPPER_PIGTAIL",
							"wire-interface-2-0:MDI_KIND_TYPE_RJ45",
							"wire-interface-2-0:MDI_KIND_TYPE_NO_SEPERABLE_CONNECTOR",
							"wire-interface-2-0:MDI_KIND_TYPE_MXC2x16",
							"wire-interface-2-0:MDI_KIND_TYPE_NOT_YET_DEFINED"
						]
					},
					"required-medium-kind": {
						"enum": [
							"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT3",
							"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT5",
							"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT6",
							"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT8",
							"wire-interface-2-0:MEDIUM_KIND_TYPE_SINGLE_MODE",
							"wire-interface-2-0:MEDIUM_KIND_TYPE_MULTI_MODE",
							"wire-interface-2-0:MEDIUM_KIND_TYPE_NOT_YET_DEFINED"
						]
					},
					"wavelength-min": {
						"type": "array",
						"items": {
							"type": "number"
						}
					},
					"wavelength-max": {
						"type": "array",
						"items": {
							"type": "number"
						}
					},
					"wavelength-grid-min": {
						"type": "number"
					},
					"short-reach-mode-is-avail": {
						"type": "boolean"
					},
					"eee-is-avail": {
						"type": "boolean"
					},
					"unidirectional-operation-is-avail": {
						"type": "boolean"
					},
					"rxlevel-low-threshold": {
						"type": "number"
					},
					"rxlevel-high-threshold": {
						"type": "number"
					},
					"temperature-low-threshold": {
						"type": "number"
					},
					"temperature-high-threshold": {
						"type": "number"
					},
					"configuration-of-number-of-bip-errors-per-ses-is-avail": {
						"type": "boolean"
					},
					"admin-shut-down-is-avail": {
						"type": "boolean"
					},
					"isolation-is-avail": {
						"type": "boolean"
					},
					"supported-loop-back-kind-list": {
						"type": "array",
						"items": {
							"enum": [
								"wire-interface-2-0:LOOP_BACK_TYPE_NONE",
								"wire-interface-2-0:LOOP_BACK_TYPE_EXTERNAL",
								"wire-interface-2-0:LOOP_BACK_TYPE_INTERNAL",
								"wire-interface-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED"
							]
						}
					},
					"maintenance-timer-range": {
						"type": "string"
					},
					"supported-alarm-list": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"performance-monitoring-is-avail": {
						"type": "boolean"
					}
				}
			},
			"type": "any"
		},
		{
			"id": "c99b0307-fd28-48ce-a1df-fec1386d4ea0",
			"key": "mountedNodeIdList",
			"value": [
				"NTS-Mentopolis",
				"SIAE-CO-12969",
				"ERICSSON-CO-13322",
				"NTS-Thomas",
				"NTS-Thorsten",
				"NTS-Andreas",
				"NTS-Sentihilvel",
				"NTS-Felix",
				"NTS-50000",
				"NTS-50001",
				"NTS-Katharina",
				"NTS-Mentopolis2",
				"ERICSSON-CO-06251",
				"HUAWEI-17830",
				"SIAE-CO-12970",
				"HUAWEI-17831"
			],
			"type": "any"
		},
		{
			"id": "436e190b-e0e3-43a9-9b7f-004ec30c2ea0",
			"key": "i",
			"value": {
				"airInterfaceList": [],
				"ethernetContainerList": [
					{
						"ltpUuid": "3168d43c-a942-4004-aca7-95bff513a218",
						"lpLid": "IIIIIIIIIII"
					},
					{
						"ltpUuid": "98201d35-1be2-4fe2-a545-65ca59712f26",
						"lpLid": "ccck6vkicc"
					},
					{
						"ltpUuid": "564f9797-bda3-4f28-96d0-d436f924fa61",
						"lpLid": "lOcOtOzczCtlah"
					}
				],
				"hybridMwStructureList": [],
				"pureEthernetStructureList": [
					{
						"ltpUuid": "5e3ffcd4-36bd-403c-a34d-f53c868aa368",
						"lpLid": "2WpXXWpEWM3p23X"
					},
					{
						"ltpUuid": "16644624-9ab2-427a-af2f-7b677844a11f",
						"lpLid": "c2W2WcWWccBb"
					},
					{
						"ltpUuid": "f9b71990-c215-4103-a628-905fbf3cab8e",
						"lpLid": "KFuFFKKFF9u"
					},
					{
						"ltpUuid": "654ae75a-1629-4bc6-92eb-7f510ebe0dff",
						"lpLid": "VWR6r"
					}
				],
				"tdmContainerList": [],
				"wireInterfaceList": [
					{
						"ltpUuid": "927bb43b-0f56-4208-8255-5095a40b84e0",
						"lpLid": "88N1188"
					},
					{
						"ltpUuid": "c0776ba7-d9de-4fde-9acd-1fd533accc98",
						"lpLid": "fLLL6dL"
					},
					{
						"ltpUuid": "a23dda3a-226c-4d8c-9608-4b29364e2f12",
						"lpLid": "AAAdwwwwdwwd"
					},
					{
						"ltpUuid": "a85f9847-51a7-40a6-9df3-eaa2df511d2b",
						"lpLid": "Y99YY2cY2cIxc2"
					},
					{
						"ltpUuid": "9109d55d-d908-4166-9a5d-9966d620f415",
						"lpLid": "uIv5IN5I5Iv"
					},
					{
						"ltpUuid": "172fff08-b767-47a9-a640-3c61ecfb9228",
						"lpLid": "qwtttuUrqqQ7"
					}
				]
			},
			"type": "any"
		},
		{
			"id": "1cf0433d-f513-4d7a-bde9-7eacf62b5d5b",
			"key": "n",
			"value": {
				"airInterfaceList": [
					{
						"ltpUuid": "LTP-MWPS-TTP-RADIO-1A",
						"lpLid": "LP-MWPS-TTP-RADIO-1A"
					}
				],
				"ethernetContainerList": [
					{
						"ltpUuid": "LTP-ETC-TTP-PORT-A",
						"lpLid": "LP-ETC-TTP-PORT-A"
					},
					{
						"ltpUuid": "LTP-ETC-TTP-LAN-4",
						"lpLid": "LP-ETC-TTP-LAN-4"
					},
					{
						"ltpUuid": "LTP-ETC-TTP-LAN-2",
						"lpLid": "LP-ETC-TTP-LAN-2"
					},
					{
						"ltpUuid": "LTP-ETC-TTP-LAN-3",
						"lpLid": "LP-ETC-TTP-LAN-3"
					},
					{
						"ltpUuid": "LTP-ETC-TTP-LAN-1",
						"lpLid": "LP-ETC-TTP-LAN-1"
					}
				],
				"hybridMwStructureList": [
					{
						"ltpUuid": "LTP-MWS-RADIO-1A",
						"lpLid": "LP-MWS-RADIO-1A"
					}
				],
				"pureEthernetStructureList": [
					{
						"ltpUuid": "LTP-MWS-LAN-3-SFP",
						"lpLid": "LP-MWS-LAN-3-SFP"
					},
					{
						"ltpUuid": "LTP-MWS-LAN-2-RJ45",
						"lpLid": "LP-MWS-LAN-2-RJ45"
					},
					{
						"ltpUuid": "LTP-MWS-LAN-3-RJ45",
						"lpLid": "LP-MWS-LAN-3-RJ45"
					},
					{
						"ltpUuid": "LTP-MWS-LAN-4-RJ45",
						"lpLid": "LP-MWS-LAN-4-RJ45"
					},
					{
						"ltpUuid": "LTP-MWS-LAN-1-RJ45",
						"lpLid": "LP-MWS-LAN-1-RJ45"
					}
				],
				"tdmContainerList": [],
				"wireInterfaceList": [
					{
						"ltpUuid": "LTP-ETY-TTP-LAN-2-RJ45",
						"lpLid": "LP-ETY-TTP-LAN-2-RJ45"
					},
					{
						"ltpUuid": "LTP-ETY-TTP-LAN-3-SFP",
						"lpLid": "LP-ETY-TTP-LAN-3-SFP"
					},
					{
						"ltpUuid": "LTP-ETY-TTP-LAN-1-RJ45",
						"lpLid": "LP-ETY-TTP-LAN-1-RJ45"
					},
					{
						"ltpUuid": "LTP-ETY-TTP-LAN-4-RJ45",
						"lpLid": "LP-ETY-TTP-LAN-4-RJ45"
					},
					{
						"ltpUuid": "LTP-ETY-TTP-LAN-3-RJ45",
						"lpLid": "LP-ETY-TTP-LAN-3-RJ45"
					}
				]
			},
			"type": "any"
		},
		{
			"id": "fba034a0-614f-446b-8302-3da13fb4cca1",
			"key": "t",
			"value": {
				"airInterfaceList": [
					{
						"ltpUuid": "RF-2146697601",
						"lpLid": "2146697601"
					},
					{
						"ltpUuid": "RF-2146697473",
						"lpLid": "2146697473"
					}
				],
				"ethernetContainerList": [
					{
						"ltpUuid": "ETH-2134638850",
						"lpLid": "2134638850"
					},
					{
						"ltpUuid": "ETH-2134638596",
						"lpLid": "2134638596"
					},
					{
						"ltpUuid": "ETH-2134638595",
						"lpLid": "2134638595"
					},
					{
						"ltpUuid": "ETH-2134638594",
						"lpLid": "2134638594"
					},
					{
						"ltpUuid": "ETH-2134638978",
						"lpLid": "2134638978"
					},
					{
						"ltpUuid": "ETH-2134671490",
						"lpLid": "2134671490"
					},
					{
						"ltpUuid": "ETH-2134638722",
						"lpLid": "2134638722"
					},
					{
						"ltpUuid": "ETH-2134638723",
						"lpLid": "2134638723"
					},
					{
						"ltpUuid": "ETH-2134647012",
						"lpLid": "2134647012"
					}
				],
				"hybridMwStructureList": [
					{
						"ltpUuid": "HMS-2146697473",
						"lpLid": "2146697473"
					},
					{
						"ltpUuid": "HMS-2146697601",
						"lpLid": "2146697601"
					}
				],
				"pureEthernetStructureList": [
					{
						"ltpUuid": "PES-2134638722",
						"lpLid": "2134638722"
					},
					{
						"ltpUuid": "PES-2134638723",
						"lpLid": "2134638723"
					},
					{
						"ltpUuid": "PES-2134638595",
						"lpLid": "2134638595"
					},
					{
						"ltpUuid": "PES-2134638596",
						"lpLid": "2134638596"
					},
					{
						"ltpUuid": "PES-2134638594",
						"lpLid": "2134638594"
					},
					{
						"ltpUuid": "PES-2134638850",
						"lpLid": "2134638850"
					},
					{
						"ltpUuid": "PES-2134638978",
						"lpLid": "2134638978"
					},
					{
						"ltpUuid": "PES-2134671490",
						"lpLid": "2134671490"
					}
				],
				"tdmContainerList": [
					{
						"ltpUuid": "TDM-2147352844",
						"lpLid": "2147352844"
					},
					{
						"ltpUuid": "TDM-2147352843",
						"lpLid": "2147352843"
					},
					{
						"ltpUuid": "TDM-2147352842",
						"lpLid": "2147352842"
					},
					{
						"ltpUuid": "TDM-2147352963",
						"lpLid": "2147352963"
					},
					{
						"ltpUuid": "TDM-2147352841",
						"lpLid": "2147352841"
					},
					{
						"ltpUuid": "TDM-2147352962",
						"lpLid": "2147352962"
					},
					{
						"ltpUuid": "TDM-2147352840",
						"lpLid": "2147352840"
					},
					{
						"ltpUuid": "TDM-2147352961",
						"lpLid": "2147352961"
					},
					{
						"ltpUuid": "TDM-2147352960",
						"lpLid": "2147352960"
					},
					{
						"ltpUuid": "TDM-2147352839",
						"lpLid": "2147352839"
					},
					{
						"ltpUuid": "TDM-2147352838",
						"lpLid": "2147352838"
					},
					{
						"ltpUuid": "TDM-2147352833",
						"lpLid": "2147352833"
					},
					{
						"ltpUuid": "TDM-2147352832",
						"lpLid": "2147352832"
					},
					{
						"ltpUuid": "TDM-2147352837",
						"lpLid": "2147352837"
					},
					{
						"ltpUuid": "TDM-2147352836",
						"lpLid": "2147352836"
					},
					{
						"ltpUuid": "TDM-2147352835",
						"lpLid": "2147352835"
					},
					{
						"ltpUuid": "TDM-2147352834",
						"lpLid": "2147352834"
					}
				],
				"wireInterfaceList": [
					{
						"ltpUuid": "ETY-2134638594",
						"lpLid": "2134638594"
					},
					{
						"ltpUuid": "ETY-2134638596",
						"lpLid": "2134638596"
					},
					{
						"ltpUuid": "ETY-2134638595",
						"lpLid": "2134638595"
					},
					{
						"ltpUuid": "ETY-2134638850",
						"lpLid": "2134638850"
					},
					{
						"ltpUuid": "ETY-2134638978",
						"lpLid": "2134638978"
					},
					{
						"ltpUuid": "ETY-2134638723",
						"lpLid": "2134638723"
					},
					{
						"ltpUuid": "ETY-2134638722",
						"lpLid": "2134638722"
					},
					{
						"ltpUuid": "ETY-2134671490",
						"lpLid": "2134671490"
					}
				]
			},
			"type": "any"
		},
		{
			"id": "a60496c4-5796-41d8-9ba3-7d668ce94913",
			"key": "e",
			"value": {
				"airInterfaceList": [
					{
						"ltpUuid": "13703afc-badc-4273-87d5-495088d7d585",
						"lpLid": "vvvvvvvvvvv"
					},
					{
						"ltpUuid": "8b76bac7-9888-43e6-94f9-6af1afcb08a5",
						"lpLid": "c5-YYhc"
					},
					{
						"ltpUuid": "948f8070-450f-4385-a1d3-ea10b4edfa74",
						"lpLid": "k44k4ekkhhk444"
					}
				],
				"ethernetContainerList": [
					{
						"ltpUuid": "53d43a9f-f7c7-4b45-ac75-ec02571250b3",
						"lpLid": "qgHguBBDBuHddHdgd"
					},
					{
						"ltpUuid": "a47b644a-22f5-4719-ac36-d6df82ef7d9a",
						"lpLid": "OxoxUMUMUxxoMxoM"
					},
					{
						"ltpUuid": "ff2c2446-20bc-4ca2-b792-98aac40a3f37",
						"lpLid": "MJPJJMMM3dP3M"
					},
					{
						"ltpUuid": "042cb9d7-9e3c-4566-bf76-74cddeb9bf0a",
						"lpLid": "fw7LK3ffL3w3fKw3www"
					},
					{
						"ltpUuid": "30dadde8-6f36-4e01-a58f-710712a488d0",
						"lpLid": "rZxVxn-8--n"
					}
				],
				"hybridMwStructureList": [],
				"pureEthernetStructureList": [
					{
						"ltpUuid": "cc6c23ee-e4c2-4285-af88-a8d4d43da5cc",
						"lpLid": "DDPBBPP"
					},
					{
						"ltpUuid": "b0980618-acb7-479f-8d2f-4ba83f1ce9a9",
						"lpLid": "-------------------"
					},
					{
						"ltpUuid": "647ec3ea-5927-4ff7-9fb0-0df33e5382e9",
						"lpLid": "mmmmmmmmmmm"
					}
				],
				"tdmContainerList": [],
				"wireInterfaceList": [
					{
						"ltpUuid": "06eb85e4-bcac-4430-90d8-caaf289f8b39",
						"lpLid": "IuAHIHH"
					},
					{
						"ltpUuid": "9b6eb5b2-a6df-41c9-946d-d178110742f7",
						"lpLid": "KKKKKKKKKKKK"
					}
				]
			},
			"type": "any"
		},
		{
			"id": "27fabf51-b2ee-45ef-b6e4-13b68a84c853",
			"key": "r",
			"value": {
				"airInterfaceList": [
					{
						"ltpUuid": "ab14471e-ac5a-40d9-b250-74eecb9e8ad2",
						"lpLid": "ReeRke"
					},
					{
						"ltpUuid": "d68aa347-21c0-4fee-86aa-b80806e8376b",
						"lpLid": "h9cL3c3cpL39ah99hLn"
					},
					{
						"ltpUuid": "6c627080-ff46-4e76-8f5b-a1781a7f4860",
						"lpLid": "lvvgvggvlllv"
					},
					{
						"ltpUuid": "282a1af3-d20b-4dfe-8d98-f61337b8cce6",
						"lpLid": "tttttttttttt"
					},
					{
						"ltpUuid": "dd46ff1b-db27-4bbb-8e1f-9a671175abc8",
						"lpLid": "UzFcxFxggFBxFBg"
					}
				],
				"ethernetContainerList": [
					{
						"ltpUuid": "62170d8a-8ef6-4bbf-b4b2-c405197b5d39",
						"lpLid": "PPtmEttmtBEtPmqtPBqE"
					},
					{
						"ltpUuid": "7cd1edd6-b570-4b02-a1da-737510437f0f",
						"lpLid": "aR4aRRRRRa44"
					}
				],
				"hybridMwStructureList": [],
				"pureEthernetStructureList": [
					{
						"ltpUuid": "04cc2fbe-0e27-427d-9e74-61d3ed0b4944",
						"lpLid": "qKKSKR"
					},
					{
						"ltpUuid": "dba65f4e-9c0a-45f4-9516-d847f1118394",
						"lpLid": "WWW9E9d"
					},
					{
						"ltpUuid": "45e6af05-55a8-4582-adbf-e050f87935ff",
						"lpLid": "AB3Bc33pAB3033B"
					}
				],
				"tdmContainerList": [],
				"wireInterfaceList": [
					{
						"ltpUuid": "6ea314df-a89f-4192-a35f-8f5d212f1163",
						"lpLid": "uuuu2"
					},
					{
						"ltpUuid": "eb398b65-66d2-4e39-accb-0577969088bd",
						"lpLid": "KOOKOOOkOk"
					},
					{
						"ltpUuid": "64382916-a5de-4da4-9a37-90587bab50e8",
						"lpLid": "AaBBa"
					}
				]
			},
			"type": "any"
		},
		{
			"id": "ec1f87c1-7a1c-4154-8ff7-f7ba2420c44b",
			"key": "f",
			"value": {
				"airInterfaceList": [
					{
						"ltpUuid": "fd9261ba-d794-4d9d-98d0-7d9892aae671",
						"lpLid": "----Gp-GpG-"
					}
				],
				"ethernetContainerList": [
					{
						"ltpUuid": "ef134a00-cf61-4cda-8d29-c0a05128745b",
						"lpLid": "WZMMXp5Z5ZXp5XZp"
					},
					{
						"ltpUuid": "344a3beb-4cf0-48a8-9eea-91661528f4ff",
						"lpLid": "JdhbYbYh00Yb0"
					},
					{
						"ltpUuid": "7a75fd39-7217-46bc-b915-b93ebcf18221",
						"lpLid": "IrIrrwwrIwwr"
					},
					{
						"ltpUuid": "5dedb94a-02e8-4357-9ebb-4e8a2dca0859",
						"lpLid": "bKKaVaKV"
					},
					{
						"ltpUuid": "4ed2535e-d22b-4717-acab-54c42bda10a3",
						"lpLid": "bimsb8wyisyb"
					}
				],
				"hybridMwStructureList": [],
				"pureEthernetStructureList": [
					{
						"ltpUuid": "d859fcfb-dedb-4964-b808-e2ffdaa7d5d8",
						"lpLid": "E6EaExa6T6x6Ta6"
					},
					{
						"ltpUuid": "57f6b3fc-5f8b-4003-812b-8c35b27ea9b3",
						"lpLid": "--K-HsHK-"
					},
					{
						"ltpUuid": "6d1c6901-8e67-49d5-99e4-0dcc14751c53",
						"lpLid": "MGGMMMMMX"
					},
					{
						"ltpUuid": "a94b7981-ccf1-4655-83f3-4eb64bd3b77d",
						"lpLid": "f499Vyfy"
					}
				],
				"tdmContainerList": [],
				"wireInterfaceList": [
					{
						"ltpUuid": "8ca11e8b-ca77-41b7-a667-2b191af861d8",
						"lpLid": "BCBkBp8pii3"
					},
					{
						"ltpUuid": "d56a8ba1-4214-4413-ba69-3161029a0d1a",
						"lpLid": "yfpvXyXrrr"
					},
					{
						"ltpUuid": "15699adb-9bd7-4d87-a595-25f0a40b3a68",
						"lpLid": "JJJJJJZZJJ"
					}
				]
			},
			"type": "any"
		},
		{
			"id": "6a531049-ed36-4207-ad27-e8eca0104678",
			"key": "a",
			"value": {
				"airInterfaceList": [
					{
						"ltpUuid": "677c8644-6b3a-4bee-af99-3d55f4372be7",
						"lpLid": "mmmmmmmmmmmmmm"
					},
					{
						"ltpUuid": "07c5ba1b-fbf2-476b-9a52-1ce1c19772aa",
						"lpLid": "dXXdd"
					}
				],
				"ethernetContainerList": [
					{
						"ltpUuid": "56f03772-059b-459d-9280-3de37f00edd3",
						"lpLid": "xvxvhxhvhhhhhhvhvhvv"
					},
					{
						"ltpUuid": "95f8fc3f-78b5-4b52-b647-442340a518a3",
						"lpLid": "dKdGKH"
					}
				],
				"hybridMwStructureList": [],
				"pureEthernetStructureList": [
					{
						"ltpUuid": "4a0d9373-d778-4f33-87df-c56dc1a2a475",
						"lpLid": "EoiEZ"
					},
					{
						"ltpUuid": "80dfffa0-1bda-4013-80c3-51cd95e02406",
						"lpLid": "PSSSVw"
					},
					{
						"ltpUuid": "c5ce24cd-a49c-432c-a851-db7e6778e8f5",
						"lpLid": "hhhhhhhh"
					},
					{
						"ltpUuid": "efd7fdb9-907d-4206-8b46-1638bbbfa85c",
						"lpLid": "C5I59KL5I"
					},
					{
						"ltpUuid": "c0a77aba-13fc-4496-b4b5-b84722290a66",
						"lpLid": "7LLm7mLkamx7Ak"
					}
				],
				"tdmContainerList": [],
				"wireInterfaceList": [
					{
						"ltpUuid": "03848b11-fded-46ab-9f0c-f5e8a206308f",
						"lpLid": "D3Z3bAAgDZDDZggZ"
					},
					{
						"ltpUuid": "7493fc08-9783-4f11-892d-c29b658a1162",
						"lpLid": "xdXxIIdXGGI"
					},
					{
						"ltpUuid": "99b98020-a35e-4add-ae37-2b1a2370b82f",
						"lpLid": "-YYJJn8Jnuu-JnJYY"
					},
					{
						"ltpUuid": "fb3e7373-05e5-4b8f-9f83-0f5758bea460",
						"lpLid": "UgYUUYLUgQgQQYQQLQLg"
					}
				]
			},
			"type": "any"
		},
		{
			"id": "4734c120-f446-4c46-8461-a6ce2a1abed6",
			"key": "c",
			"value": {
				"airInterfaceList": [
					{
						"ltpUuid": "1697aad9-d6e5-4182-b133-bddc353d1a4b",
						"lpLid": "dYEYdYd"
					},
					{
						"ltpUuid": "2dd45ac1-9067-41c8-b17d-361b14e21c58",
						"lpLid": "QXQddQXcQQQdXXX"
					},
					{
						"ltpUuid": "2b08bab0-6727-405f-860c-85b696aaa4b8",
						"lpLid": "BFFFBBBB"
					}
				],
				"ethernetContainerList": [
					{
						"ltpUuid": "252d505d-e412-4f3c-8ab3-80a3fae729db",
						"lpLid": "HsPPPjjPUP"
					},
					{
						"ltpUuid": "fe571e36-434c-4059-be44-d338bbfd8d6d",
						"lpLid": "5wdd55dSwFdFdSw6SS6"
					},
					{
						"ltpUuid": "6c9b9129-8e22-4635-8761-b4748561aeac",
						"lpLid": "jjMMMEMEMEEjM"
					},
					{
						"ltpUuid": "f2a57fad-9ec2-4327-a946-22d73413c3d6",
						"lpLid": "K-Ouuy0KyfO"
					},
					{
						"ltpUuid": "fdd96b80-1e34-4c0e-8e6b-56e07593c557",
						"lpLid": "YYCFE"
					},
					{
						"ltpUuid": "cf972b88-5a70-4ca7-ba5e-494b9b200a54",
						"lpLid": "ppppppppp"
					}
				],
				"hybridMwStructureList": [],
				"pureEthernetStructureList": [
					{
						"ltpUuid": "e24f3857-10f2-4aed-80bc-3a8dbe50a1e6",
						"lpLid": "OOBOZ"
					}
				],
				"tdmContainerList": [],
				"wireInterfaceList": [
					{
						"ltpUuid": "f800a856-03e9-4b38-af82-c9333922d0f6",
						"lpLid": "GgBBBZgBgMwgwMU"
					},
					{
						"ltpUuid": "babfe4d4-9ca3-40a2-9860-337d362f2e9a",
						"lpLid": "he2Jgg2"
					},
					{
						"ltpUuid": "12c3146e-fd0b-42cb-8e37-199727009fd7",
						"lpLid": "4PPwL9449P9P9L4L"
					}
				]
			},
			"type": "any"
		},
		{
			"id": "6c325e13-e8e1-473f-9c53-3984945b6dd8",
			"key": "s",
			"value": {
				"airInterfaceList": [
					{
						"ltpUuid": "ab14471e-ac5a-40d9-b250-74eecb9e8ad2",
						"lpLid": "ReeRke"
					},
					{
						"ltpUuid": "d68aa347-21c0-4fee-86aa-b80806e8376b",
						"lpLid": "h9cL3c3cpL39ah99hLn"
					},
					{
						"ltpUuid": "6c627080-ff46-4e76-8f5b-a1781a7f4860",
						"lpLid": "lvvgvggvlllv"
					},
					{
						"ltpUuid": "282a1af3-d20b-4dfe-8d98-f61337b8cce6",
						"lpLid": "tttttttttttt"
					},
					{
						"ltpUuid": "dd46ff1b-db27-4bbb-8e1f-9a671175abc8",
						"lpLid": "UzFcxFxggFBxFBg"
					}
				],
				"ethernetContainerList": [
					{
						"ltpUuid": "62170d8a-8ef6-4bbf-b4b2-c405197b5d39",
						"lpLid": "PPtmEttmtBEtPmqtPBqE"
					},
					{
						"ltpUuid": "7cd1edd6-b570-4b02-a1da-737510437f0f",
						"lpLid": "aR4aRRRRRa44"
					}
				],
				"hybridMwStructureList": [],
				"pureEthernetStructureList": [
					{
						"ltpUuid": "04cc2fbe-0e27-427d-9e74-61d3ed0b4944",
						"lpLid": "qKKSKR"
					},
					{
						"ltpUuid": "dba65f4e-9c0a-45f4-9516-d847f1118394",
						"lpLid": "WWW9E9d"
					},
					{
						"ltpUuid": "45e6af05-55a8-4582-adbf-e050f87935ff",
						"lpLid": "AB3Bc33pAB3033B"
					}
				],
				"tdmContainerList": [],
				"wireInterfaceList": [
					{
						"ltpUuid": "6ea314df-a89f-4192-a35f-8f5d212f1163",
						"lpLid": "uuuu2"
					},
					{
						"ltpUuid": "eb398b65-66d2-4e39-accb-0577969088bd",
						"lpLid": "KOOKOOOkOk"
					},
					{
						"ltpUuid": "64382916-a5de-4da4-9a37-90587bab50e8",
						"lpLid": "AaBBa"
					}
				]
			},
			"type": "any"
		},
		{
			"id": "94cb521a-82f5-4cbb-8d19-1cc81b2768bf",
			"key": "A",
			"value": {
				"airInterfaceList": [],
				"ethernetContainerList": [
					{
						"ltpUuid": "3168d43c-a942-4004-aca7-95bff513a218",
						"lpLid": "IIIIIIIIIII"
					},
					{
						"ltpUuid": "98201d35-1be2-4fe2-a545-65ca59712f26",
						"lpLid": "ccck6vkicc"
					},
					{
						"ltpUuid": "564f9797-bda3-4f28-96d0-d436f924fa61",
						"lpLid": "lOcOtOzczCtlah"
					}
				],
				"hybridMwStructureList": [],
				"pureEthernetStructureList": [
					{
						"ltpUuid": "5e3ffcd4-36bd-403c-a34d-f53c868aa368",
						"lpLid": "2WpXXWpEWM3p23X"
					},
					{
						"ltpUuid": "16644624-9ab2-427a-af2f-7b677844a11f",
						"lpLid": "c2W2WcWWccBb"
					},
					{
						"ltpUuid": "f9b71990-c215-4103-a628-905fbf3cab8e",
						"lpLid": "KFuFFKKFF9u"
					},
					{
						"ltpUuid": "654ae75a-1629-4bc6-92eb-7f510ebe0dff",
						"lpLid": "VWR6r"
					}
				],
				"tdmContainerList": [],
				"wireInterfaceList": [
					{
						"ltpUuid": "927bb43b-0f56-4208-8255-5095a40b84e0",
						"lpLid": "88N1188"
					},
					{
						"ltpUuid": "c0776ba7-d9de-4fde-9acd-1fd533accc98",
						"lpLid": "fLLL6dL"
					},
					{
						"ltpUuid": "a23dda3a-226c-4d8c-9608-4b29364e2f12",
						"lpLid": "AAAdwwwwdwwd"
					},
					{
						"ltpUuid": "a85f9847-51a7-40a6-9df3-eaa2df511d2b",
						"lpLid": "Y99YY2cY2cIxc2"
					},
					{
						"ltpUuid": "9109d55d-d908-4166-9a5d-9966d620f415",
						"lpLid": "uIv5IN5I5Iv"
					},
					{
						"ltpUuid": "172fff08-b767-47a9-a640-3c61ecfb9228",
						"lpLid": "qwtttuUrqqQ7"
					}
				]
			},
			"type": "any"
		},
		{
			"id": "290076c1-c9ec-4c40-b9a3-d3aa2614b441",
			"key": "M",
			"value": {
				"airInterfaceList": [
					{
						"ltpUuid": "RF-2146697601",
						"lpLid": "2146697601"
					},
					{
						"ltpUuid": "RF-2146697857",
						"lpLid": "2146697857"
					},
					{
						"ltpUuid": "RF-2146697473",
						"lpLid": "2146697473"
					}
				],
				"ethernetContainerList": [
					{
						"ltpUuid": "ETH-2134638978",
						"lpLid": "2134638978"
					},
					{
						"ltpUuid": "ETH-2134647780",
						"lpLid": "2134647780"
					},
					{
						"ltpUuid": "ETH-2134639490",
						"lpLid": "2134639490"
					},
					{
						"ltpUuid": "ETH-2134639491",
						"lpLid": "2134639491"
					},
					{
						"ltpUuid": "ETH-2134639234",
						"lpLid": "2134639234"
					},
					{
						"ltpUuid": "ETH-2134672258",
						"lpLid": "2134672258"
					}
				],
				"hybridMwStructureList": [
					{
						"ltpUuid": "HMS-2146697857",
						"lpLid": "2146697857"
					},
					{
						"ltpUuid": "HMS-2146697473",
						"lpLid": "2146697473"
					},
					{
						"ltpUuid": "HMS-2146697601",
						"lpLid": "2146697601"
					}
				],
				"pureEthernetStructureList": [
					{
						"ltpUuid": "PES-2134672258",
						"lpLid": "2134672258"
					},
					{
						"ltpUuid": "PES-2134638978",
						"lpLid": "2134638978"
					},
					{
						"ltpUuid": "PES-2134639490",
						"lpLid": "2134639490"
					},
					{
						"ltpUuid": "PES-2134639491",
						"lpLid": "2134639491"
					},
					{
						"ltpUuid": "PES-2134639234",
						"lpLid": "2134639234"
					}
				],
				"tdmContainerList": [
					{
						"ltpUuid": "TDM-2147352965",
						"lpLid": "2147352965"
					},
					{
						"ltpUuid": "TDM-2147353218",
						"lpLid": "2147353218"
					},
					{
						"ltpUuid": "TDM-2147353217",
						"lpLid": "2147353217"
					},
					{
						"ltpUuid": "TDM-2147352964",
						"lpLid": "2147352964"
					},
					{
						"ltpUuid": "TDM-2147352963",
						"lpLid": "2147352963"
					},
					{
						"ltpUuid": "TDM-2147353216",
						"lpLid": "2147353216"
					},
					{
						"ltpUuid": "TDM-2147352962",
						"lpLid": "2147352962"
					},
					{
						"ltpUuid": "TDM-2147352969",
						"lpLid": "2147352969"
					},
					{
						"ltpUuid": "TDM-2147352968",
						"lpLid": "2147352968"
					},
					{
						"ltpUuid": "TDM-2147352967",
						"lpLid": "2147352967"
					},
					{
						"ltpUuid": "TDM-2147353219",
						"lpLid": "2147353219"
					},
					{
						"ltpUuid": "TDM-2147352966",
						"lpLid": "2147352966"
					},
					{
						"ltpUuid": "TDM-2147352961",
						"lpLid": "2147352961"
					},
					{
						"ltpUuid": "TDM-2147352960",
						"lpLid": "2147352960"
					},
					{
						"ltpUuid": "TDM-2147352832",
						"lpLid": "2147352832"
					},
					{
						"ltpUuid": "TDM-2147352972",
						"lpLid": "2147352972"
					},
					{
						"ltpUuid": "TDM-2147352971",
						"lpLid": "2147352971"
					},
					{
						"ltpUuid": "TDM-2147352970",
						"lpLid": "2147352970"
					}
				],
				"wireInterfaceList": [
					{
						"ltpUuid": "ETY-2134638978",
						"lpLid": "2134638978"
					},
					{
						"ltpUuid": "ETY-2134639234",
						"lpLid": "2134639234"
					},
					{
						"ltpUuid": "ETY-2134672258",
						"lpLid": "2134672258"
					},
					{
						"ltpUuid": "ETY-2134639490",
						"lpLid": "2134639490"
					},
					{
						"ltpUuid": "ETY-2134639491",
						"lpLid": "2134639491"
					}
				]
			},
			"type": "any"
		},
		{
			"id": "20099158-75c5-4a8e-94a8-92360cbd81ee",
			"key": "o",
			"value": {
				"airInterfaceList": [],
				"ethernetContainerList": [],
				"hybridMwStructureList": [],
				"pureEthernetStructureList": [],
				"tdmContainerList": [],
				"wireInterfaceList": []
			},
			"type": "any"
		},
		{
			"id": "3b1ef773-2904-45ab-8bfd-68d99f26b081",
			"key": "u",
			"value": {
				"airInterfaceList": [
					{
						"ltpUuid": "LTP-MWPS-TTP-RADIO-1A",
						"lpLid": "LP-MWPS-TTP-RADIO-1A"
					}
				],
				"ethernetContainerList": [
					{
						"ltpUuid": "LTP-ETC-TTP-PORT-A",
						"lpLid": "LP-ETC-TTP-PORT-A"
					},
					{
						"ltpUuid": "LTP-ETC-TTP-LAN-4",
						"lpLid": "LP-ETC-TTP-LAN-4"
					},
					{
						"ltpUuid": "LTP-ETC-TTP-LAN-2",
						"lpLid": "LP-ETC-TTP-LAN-2"
					},
					{
						"ltpUuid": "LTP-ETC-TTP-LAN-3",
						"lpLid": "LP-ETC-TTP-LAN-3"
					},
					{
						"ltpUuid": "LTP-ETC-TTP-LAN-1",
						"lpLid": "LP-ETC-TTP-LAN-1"
					}
				],
				"hybridMwStructureList": [
					{
						"ltpUuid": "LTP-MWS-RADIO-1A",
						"lpLid": "LP-MWS-RADIO-1A"
					}
				],
				"pureEthernetStructureList": [
					{
						"ltpUuid": "LTP-MWS-LAN-4-SFP",
						"lpLid": "LP-MWS-LAN-4-SFP"
					},
					{
						"ltpUuid": "LTP-MWS-LAN-3-SFP",
						"lpLid": "LP-MWS-LAN-3-SFP"
					},
					{
						"ltpUuid": "LTP-MWS-LAN-4-RJ45",
						"lpLid": "LP-MWS-LAN-4-RJ45"
					},
					{
						"ltpUuid": "LTP-MWS-LAN-1-RJ45",
						"lpLid": "LP-MWS-LAN-1-RJ45"
					},
					{
						"ltpUuid": "LTP-MWS-LAN-2-RJ45",
						"lpLid": "LP-MWS-LAN-2-RJ45"
					},
					{
						"ltpUuid": "LTP-MWS-LAN-3-RJ45",
						"lpLid": "LP-MWS-LAN-3-RJ45"
					}
				],
				"tdmContainerList": [],
				"wireInterfaceList": [
					{
						"ltpUuid": "LTP-ETY-TTP-LAN-2-RJ45",
						"lpLid": "LP-ETY-TTP-LAN-2-RJ45"
					},
					{
						"ltpUuid": "LTP-ETY-TTP-LAN-3-RJ45",
						"lpLid": "LP-ETY-TTP-LAN-3-RJ45"
					},
					{
						"ltpUuid": "LTP-ETY-TTP-LAN-3-SFP",
						"lpLid": "LP-ETY-TTP-LAN-3-SFP"
					},
					{
						"ltpUuid": "LTP-ETY-TTP-LAN-4-SFP",
						"lpLid": "LP-ETY-TTP-LAN-4-SFP"
					},
					{
						"ltpUuid": "LTP-ETY-TTP-LAN-1-RJ45",
						"lpLid": "LP-ETY-TTP-LAN-1-RJ45"
					},
					{
						"ltpUuid": "LTP-ETY-TTP-LAN-4-RJ45",
						"lpLid": "LP-ETY-TTP-LAN-4-RJ45"
					}
				]
			},
			"type": "any"
		},
		{
			"id": "ec2010e6-a881-4c45-96a0-6fd2093605e0",
			"key": "technologyUnderTest",
			"value": 0,
			"type": "number"
		}
	],
	"protocolProfileBehavior": {}
}